<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/c++ | Tomorrow]]></title>
  <link href="http://chaye146.github.io//github/blog/categories/c-slash-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://chaye146.github.io//github/"/>
  <updated>2014-10-21T01:37:34+08:00</updated>
  <id>http://chaye146.github.io//github/</id>
  <author>
    <name><![CDATA[qypJack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithm]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/21/sorting-algorithm/"/>
    <updated>2014-10-21T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/21/sorting-algorithm</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Sorting Algorithm</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">Bubble Sort</h2>
<div class="outline-text-2" id="text-unnumbered-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">bubbleSort</span>(<span style="color: #66D9EF;">int</span>* <span style="color: #F92672;">ary</span>, <span style="color: #66D9EF;">unsigned</span> <span style="color: #F92672;">len</span>)
{
    <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">unsigned</span> <span style="color: #F92672;">i</span> = 0; i&lt;len-1; ++i) {
        <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">unsigned</span> <span style="color: #F92672;">j</span> = 1; j &lt; len; ++j) { <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">&#27599;&#20010;&#24490;&#29615;&#26368;&#22823;&#30340;&#37117;&#20250;&#21040;&#20302;&#20301;</span>
            <span style="color: #66D9EF;">if</span> (ary[i] &lt; ary[j])
            {
                ary[i] = ary[i] ^ ary[j];
                ary[j] = ary[i] ^ ary[j];
                ary[i] = ary[i] ^ ary[j];
            }
        }

    }

}
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/20/data-structure/"/>
    <updated>2014-10-20T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/20/data-structure</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Data structure</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">List</h2>
<div class="outline-text-2" id="text-unnumbered-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">list for int</span>
<span style="color: #66D9EF;">struct</span> <span style="color: #66D9EF;">Node</span>
{
    <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">m_data</span>;
    <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">m_next</span>;
};

<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">.h</span>
TODO
</pre>
</div>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">.cpp</span>
TODO
</pre>
</div>
</div>

<div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3">List Alogorithm</h3>
<div class="outline-text-3" id="text-unnumbered-3">
</div><div id="outline-container-unnumbered-4" class="outline-4">
<h4 id="unnumbered-4">reverse a list</h4>
<div class="outline-text-4" id="text-unnumbered-4">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">Node</span>* <span style="color: #F92672; font-style: italic;">reverse</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">pre</span>, <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">next</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>next)
    {
        <span style="color: #66D9EF;">return</span> pre;
    }

    <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">newhead</span> = reverse(next, next-&gt;next);
    next-&gt;next = pre;
    <span style="color: #66D9EF;">return</span> newhead;
}
</pre>
</div>
</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Tree Traversal]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/20/binary-tree-traversal/"/>
    <updated>2014-10-20T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/20/binary-tree-traversal</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Binary Tree Traversal</h2>
<div class="outline-text-2" id="text-unnumbered-1">
</div><div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2"><a href="#unnumbered-5">Pre-order traversal</a></h3>
</div>

<div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3"><a href="#unnumbered-6">In-order traversal</a></h3>
</div>

<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4"><a href="#unnumbered-7">Post-order traversal</a></h3>
<div class="outline-text-3" id="text-unnumbered-4">
<p>
<!-- more -->
</p>
</div>
</div>
</div>




<div id="outline-container-unnumbered-5" class="outline-2">
<h2 id="unnumbered-5">Pre-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-5">
<p>
root-&gt;left-&gt;right
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">preorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    visit(root);
    preorder(root-&gt;left);
    preorder(root-&gt;right);
}
</pre>
</div>
</div>
</div>




<div id="outline-container-unnumbered-6" class="outline-2">
<h2 id="unnumbered-6">In-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-6">
<p>
left-&gt;root-&gt;right;
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">inorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    inorder(root-&gt;left);
    visit(root);
    inorder(root-&gt;right);
}
</pre>
</div>
</div>
</div>




<div id="outline-container-unnumbered-7" class="outline-2">
<h2 id="unnumbered-7">Post-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-7">
<p>
right-&gt;left-&gt;root
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">postorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    postorder(root-&gt;right);
    postorder(root-&gt;left);
    visit(root);
}
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning GCC Compilation]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/19/Learning-GCC-Compilation/"/>
    <updated>2014-10-19T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/19/Learning-GCC-Compilation</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">General Use Of GCC</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
<div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2">Compilation States</h3>
<div class="outline-text-3" id="text-unnumbered-2">
</div><div id="outline-container-unnumbered-3" class="outline-4">
<h4 id="unnumbered-3">Preprocessing</h4>
<div class="outline-text-4" id="text-unnumbered-3">
<p>
-E : stop after preprocessing 
</p>

<p>
-D name : define a marco 
</p>

<p>
-D name=definition : define a marco with the definition 
</p>

<p>
-I dir : Add additional directory to the list of directories to be searched for the header fiels, the add -I option directories are search before the standard system include directory.
</p>

<p>
-w : supress all warnning 
</p>

<p>
-Wall : turn on all warnning
</p>

<p>
-std=standard : specify the standard 
</p>

<p>
-pedantic : Issue all the mandatory diagnostics listed in the C standard
</p>
</div>
</div>

<div id="outline-container-unnumbered-4" class="outline-4">
<h4 id="unnumbered-4">Compilation</h4>
<div class="outline-text-4" id="text-unnumbered-4">
<p>
-S : stop after compilation, not assemble
</p>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-4">
<h4 id="unnumbered-5">Assemble</h4>
<div class="outline-text-4" id="text-unnumbered-5">
<p>
-c : stop after compilation and assemble, not link
</p>
</div>
</div>

<div id="outline-container-unnumbered-6" class="outline-4">
<h4 id="unnumbered-6">Linking</h4>
<div class="outline-text-4" id="text-unnumbered-6">
<p>
-l library : search the library when linking
</p>

<p>
-shared : produce a shared object 
</p>

<p>
-static : to prevent link with the shared libraries 
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Options Controlling the kind of Output</h3>
<div class="outline-text-3" id="text-unnumbered-7">
<p>
-E : Stop after Preprocessing
</p>

<p>
-S : Stop after compilation, not assemble
</p>

<p>
-c : Stop after compilation and assemble , not link
</p>

<p>
-o : Specify the output file name
</p>

<p>
-g : Producce debugging infomation in the operation native format
</p>
</div>
</div>

<div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Options for directory search</h3>
<div class="outline-text-3" id="text-unnumbered-8">
<p>
-I : add directory to be searched for header files
</p>

<p>
-L : add directory to be searched for &#8216;-l&#8217; linking library
</p>
</div>
</div>

<div id="outline-container-unnumbered-9" class="outline-3">
<h3 id="unnumbered-9">Hardware Models and Configurations</h3>
<div class="outline-text-3" id="text-unnumbered-9">
<p>
-fPIC ： emit Position Independent Code, suitable for dynamic link, used when create a shared library with -shared option
</p>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
