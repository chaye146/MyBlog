<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tomorrow]]></title>
  <link href="http://chaye146.github.io//github/atom.xml" rel="self"/>
  <link href="http://chaye146.github.io//github/"/>
  <updated>2015-02-23T01:10:34+08:00</updated>
  <id>http://chaye146.github.io//github/</id>
  <author>
    <name><![CDATA[qypJack]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Daily]]></title>
    <link href="http://chaye146.github.io//github/blog/2015/02/23/emacs-daily/"/>
    <updated>2015-02-23T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2015/02/23/emacs-daily</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Learn an command every day</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
octpress :
</p>

<p>
C-c C-e P f press current blog
</p>

<p>
rake preview preview blog on localhost:4000/MyBlog
</p>

<p>
rake deploy view blog on chaye146.github.io/MyBlog
</p>

<p>
<!-- more -->
</p>
</div>

<div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2">evil-nerd-commanter</h3>
<div class="outline-text-3" id="text-unnumbered-2">
<p>
M-;  M-n M-;
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Basic]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/11/14/linux-basic/"/>
    <updated>2014-11-14T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/11/14/linux-basic</id>
    <content type="html"><![CDATA[<p>
<!-- more -->
</p>
<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Linux Kernel</h2>
<div class="outline-text-2" id="text-unnumbered-1">
</div><div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2">System memory management</h3>
<div class="outline-text-3" id="text-unnumbered-2">
<p>
Current virtual memory info : cat /proc/meminfo
</p>

<p>
Current shared memory pages : ipcs -m
</p>
</div>
</div>
<div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3">Software program management</h3>
<div class="outline-text-3" id="text-unnumbered-3">
<p>
Current running Process : ps -ax
</p>
</div>
</div>
<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4">Hardware management</h3>
<div class="outline-text-3" id="text-unnumbered-4">
<p>
Linux System identifies hardware device as special file, called device files. 
</p>

<p>
Linux System creates special files, call nodes, for each device.
</p>

<p>
three classifications of device files : character, block, network
</p>
<ul class="org-ul">
<li>character device file
</li>
</ul>
<p>
handle data one character at a time. such as modems and terminals.
</p>
<ul class="org-ul">
<li>block
</li>
</ul>
<p>
handle data in large blocks at a time. such as disk devices.
</p>
<ul class="org-ul">
<li>network
</li>
</ul>
<p>
for devices that uses packets to send and receive data.
</p>
</div>
</div>
<div id="outline-container-unnumbered-5" class="outline-3">
<h3 id="unnumbered-5">Filesystem management</h3>
</div>
</div>
<div id="outline-container-unnumbered-6" class="outline-2">
<h2 id="unnumbered-6">Linux Console</h2>
<div class="outline-text-2" id="text-unnumbered-6">
<p>
linux system creates seven virtual consoles automatically , hold down Ctrl+Alt+(F1~F8) switch between consoles.
</p>

<p>
there are two environment variables that control the format of the command line prompt.
</p>

<p>
PS1 : control the default command line prompt format. 
</p>

<p>
PS2 : control the second tired command line prompt format.
</p>

<p>
The special characters can be used in the prompt string
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Character</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\a</td>
<td class="left">The bell character</td>
</tr>

<tr>
<td class="left">\d</td>
<td class="left">The date in the format &#8220;Day Month Date&#8221;</td>
</tr>

<tr>
<td class="left">\e</td>
<td class="left">The ASCII escape chareacter</td>
</tr>

<tr>
<td class="left">\h</td>
<td class="left">The local host name</td>
</tr>

<tr>
<td class="left">\H</td>
<td class="left">The fully qualified domin host name</td>
</tr>

<tr>
<td class="left">\j</td>
<td class="left">The number of jobs currently manage by the shell</td>
</tr>

<tr>
<td class="left">\l</td>
<td class="left">The basename of the shell&#8217;s terminal device name</td>
</tr>

<tr>
<td class="left">\n</td>
<td class="left">The ASCII new line character</td>
</tr>

<tr>
<td class="left">\r</td>
<td class="left">The ASCII carriage return</td>
</tr>

<tr>
<td class="left">&sect;</td>
<td class="left">The name of the shell</td>
</tr>

<tr>
<td class="left">\t</td>
<td class="left">The current time in 24-hour HH:MM:SS format</td>
</tr>

<tr>
<td class="left">\T</td>
<td class="left">The current time in 12-hour HH:MM:SS format</td>
</tr>

<tr>
<td class="left">\u</td>
<td class="left">The username of the current user</td>
</tr>

<tr>
<td class="left">\w</td>
<td class="left">The current working directory</td>
</tr>

<tr>
<td class="left">\W</td>
<td class="left">The basename of current working directory</td>
</tr>

<tr>
<td class="left">\!</td>
<td class="left">The bash shell history number of this command</td>
</tr>

<tr>
<td class="left">\#</td>
<td class="left">The command number of this command</td>
</tr>

<tr>
<td class="left">\$</td>
<td class="left">A dollar sign if a normal user, or a pound sign if the root user</td>
</tr>

<tr>
<td class="left">\nnn</td>
<td class="left">The character corresponding to the octal value nnn</td>
</tr>

<tr>
<td class="left">&#92;</td>
<td class="left">A backslash</td>
</tr>

<tr>
<td class="left">\[</td>
<td class="left">Begin a control code sequence</td>
</tr>

<tr>
<td class="left">\]</td>
<td class="left">End a control code sequence</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-2">
<h2 id="unnumbered-7">System administration</h2>
<div class="outline-text-2" id="text-unnumbered-7">
</div><div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Managing users, groups and permissions</h3>
<div class="outline-text-3" id="text-unnumbered-8">
<p>
first time login. change the root password : sudo passwd
</p>

<ul class="org-ul">
<li>passwd file
</li>
</ul>
<p>
every account on the system has an entry in the file /etc/passwd
</p>

<p>
each entry format :  username:password:uid:gid:gecos:homedir:shell
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-9" class="outline-2">
<h2 id="unnumbered-9">Handling files</h2>
</div>
<div id="outline-container-unnumbered-10" class="outline-2">
<h2 id="unnumbered-10">manipulating text</h2>
</div>
<div id="outline-container-unnumbered-11" class="outline-2">
<h2 id="unnumbered-11">managing process</h2>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Basic]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/31/c++-basic/"/>
    <updated>2014-10-31T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/31/c++-basic</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">C++ Review</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">The Basic</h2>
<div class="outline-text-2" id="text-unnumbered-2">
</div><div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3">build-in type</h3>
<div class="outline-text-3" id="text-unnumbered-3">
<p>
build-in type and compound type are initialized at global scope, class memeber of build-in or compound type are uninitialized.
</p>
</div>
</div>
<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4">Reference</h3>
<div class="outline-text-3" id="text-unnumbered-4">
<p>
Reference is a compound type.  A compound type is a type that is defined in terms of another type.
</p>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-3">
<h3 id="unnumbered-5">Enumerations</h3>
<div class="outline-text-3" id="text-unnumbered-5">
<p>
enum enumType{val1, val2, val3} 
</p>

<p>
each enum defines a new type. and each enum value is a const enum type object.
</p>

<p>
by default, the first enumerator is assigned the value zero.
</p>
</div>
</div>

<div id="outline-container-unnumbered-6" class="outline-3">
<h3 id="unnumbered-6">Array and Pointer</h3>
<div class="outline-text-3" id="text-unnumbered-6">
<p>
array and pointer are similar to vector and its iterator
</p>

<ul class="org-ul">
<li>size_t 
</li>
</ul>
<p>
size_t is a machine-specific unsigned type that is guaranteed to b large enough to hold the size of an object in memory.
</p>

<ul class="org-ul">
<li>array initialization
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">char</span> <span style="color: #F92672;">ary</span>[] = <span style="color: #E6DB74;">"hello"</span>;
<span style="color: #66D9EF;">int</span> <span style="color: #F92672;">ary</span>[10] = {}; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">initialize the ary with default value 0;</span>
<span style="color: #66D9EF;">int</span> <span style="color: #F92672;">ary</span>[3] = {1, 2, 3}; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">initializa the ary with the given value.</span>
</pre>
</div>

<ul class="org-ul">
<li>define pointers 
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">int</span> *<span style="color: #F92672;">ptr1</span>, *<span style="color: #F92672;">ptr2</span>;  <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">define two pointer to int , not int* ptr1, ptr2;</span>
<span style="color: #66D9EF;">int</span> **<span style="color: #F92672;">pptr1</span>, **<span style="color: #F92672;">ptr2</span>;
<span style="color: #66D9EF;">const</span> <span style="color: #66D9EF;">int</span> * <span style="color: #66D9EF;">const</span> * <span style="color: #66D9EF;">const</span> <span style="color: #F92672;">ptr</span> = &amp;ptr1; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">const pointer to const pointer to const int;</span>
</pre>
</div>

<ul class="org-ul">
<li>pointer arithmatic
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">char</span> <span style="color: #F92672;">ary</span>[10];
<span style="color: #66D9EF;">char</span>* <span style="color: #F92672;">bptr</span> = ary;
<span style="color: #66D9EF;">char</span>* <span style="color: #F92672;">eptr</span> = ary + 10;
<span style="color: #66D9EF;">ptrdiff_t</span> <span style="color: #F92672;">n</span> = bptr - eptr; <span style="color: #465457; font-style: italic;">//  </span><span style="color: #465457; font-style: italic;">n = -10, ptrdiff_t is defined in cstddef heder, a machine-specific type, is a signed integral type.</span>
</pre>
</div>

<ul class="org-ul">
<li>pointer and typedefs
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">string</span> *<span style="color: #66D9EF;">pstring</span>;
<span style="color: #66D9EF;">const</span> <span style="color: #66D9EF;">pstring</span> <span style="color: #F92672;">cstr</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">const pointer to string;  not pointer to const string; equal to string* const cstr;</span>
</pre>
</div>

<ul class="org-ul">
<li>c-style character strings
</li>
</ul>
<p>
c-style strings are null terminated arrays of characters;
</p>

<ul class="org-ul">
<li>dynamic array
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">string</span> *<span style="color: #F92672;">str</span> = <span style="color: #66D9EF;">new</span> <span style="color: #66D9EF;">string</span>[10]; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">the default constructor of string is used to initialize each element.</span>
<span style="color: #66D9EF;">int</span> *<span style="color: #F92672;">ary</span> = <span style="color: #66D9EF;">new</span> <span style="color: #66D9EF;">int</span>[10]; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">build-in type, elements are uninitialized</span>
<span style="color: #66D9EF;">int</span> *<span style="color: #F92672;">ary</span> = <span style="color: #66D9EF;">new</span> <span style="color: #66D9EF;">int</span>[10](); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">build-in type initialze to default value which integer is 0</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Sizeof operator</h3>
<div class="outline-text-3" id="text-unnumbered-7">
<p>
!the result of sizeof expression is a compile-time constant, returns a value of type size_t
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">char</span> <span style="color: #F92672;">ary</span>[] = <span style="color: #E6DB74;">"hello"</span>;
<span style="color: #66D9EF;">char</span> *<span style="color: #F92672;">ptr</span> = ary;
cout &lt;&lt; *ptr &lt;&lt; endl;
<span style="color: #66D9EF;">sizeof</span>(++ptr);
cout &lt;&lt; *ptr &lt;&lt; endl;
<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">both output of the *ptr are 'h', the sizeof operator is evaluate in compile-time , and does not evaluate the expression ++ptr;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Reference and Pointer</h3>
</div>
</div>

<div id="outline-container-unnumbered-9" class="outline-2">
<h2 id="unnumbered-9">Function</h2>
<div class="outline-text-2" id="text-unnumbered-9">
</div><div id="outline-container-unnumbered-10" class="outline-3">
<h3 id="unnumbered-10">Overload</h3>
<div class="outline-text-3" id="text-unnumbered-10">
<p>
two function that appear in the same scope are overloaded if they have the same name but have different parameter lists;
</p>
</div>
</div>

<div id="outline-container-unnumbered-11" class="outline-3">
<h3 id="unnumbered-11">Default parameter and overload</h3>
<div class="outline-text-3" id="text-unnumbered-11">
<p>
define a function with default parameters equal to define a set of overloaded functions 
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">int</span> <span style="color: #F92672;">a</span>, <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">b</span> = 1, <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">c</span> = 2)
<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">equal to</span>
<span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">int</span>)
<span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">int</span>, <span style="color: #66D9EF;">int</span>)
<span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">int</span>, <span style="color: #66D9EF;">int</span>, <span style="color: #66D9EF;">int</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-12" class="outline-3">
<h3 id="unnumbered-12">Overloading and scope</h3>
<div class="outline-text-3" id="text-unnumbered-12">
<p>
In c++ name lookup happens before type checking;
the compiler first look for a declaration of that name in local scope. if the name is found, the compiler does not lookup for the name in an outer scope.
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">print</span>(<span style="color: #66D9EF;">const</span> <span style="color: #66D9EF;">string</span> <span style="color: #F92672;">s</span>);
<span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">print</span>(<span style="color: #66D9EF;">double</span>);
<span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>()
{
    <span style="color: #66D9EF;">void</span> <span style="color: #F92672;">print</span>(<span style="color: #66D9EF;">int</span>); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">new scope: hide previous instancs of print;</span>
    print(<span style="color: #E6DB74;">"error"</span>); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">error, print(const string&amp;) is hidden;</span>
}
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-13" class="outline-3">
<h3 id="unnumbered-13">Function matching and argument conversion</h3>
<div class="outline-text-3" id="text-unnumbered-13">
<p>
Function overload resolution: how a function call is associated with a specific function from a set of overloaded functions.
Three Step:
</p>
<ul class="org-ul">
<li>Candidate functions
A function with the same name as the function that is called.
And the declaration is visible at the point of the call.
</li>
<li>Determine the Viable functions
</li>
<li>Finding the best match, if any
</li>
</ul>
</div>
</div>
<div id="outline-container-unnumbered-14" class="outline-3">
<h3 id="unnumbered-14">Function Pointer</h3>
<div class="outline-text-3" id="text-unnumbered-14">
<ul class="org-ul">
<li>typedef function pointer
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">void</span>(*<span style="color: #66D9EF;">fptr</span>)(<span style="color: #66D9EF;">int</span>);<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">define fptr as type void(*)(int), a function pointer type</span>

<span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">int</span> <span style="color: #66D9EF;">func</span>(<span style="color: #66D9EF;">int</span>*, <span style="color: #66D9EF;">int</span>); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">func is a function type, not a function pointer type</span>
<span style="color: #66D9EF;">func</span> <span style="color: #F92672; font-style: italic;">f1</span>(); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">error</span>
<span style="color: #66D9EF;">func</span> *<span style="color: #F92672; font-style: italic;">f2</span>(); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">ok</span>
</pre>
</div>

<ul class="org-ul">
<li>initialing function pointer
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">int</span>, <span style="color: #66D9EF;">int</span>);
<span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">void</span>(*<span style="color: #66D9EF;">fp</span>)(<span style="color: #66D9EF;">int</span>, <span style="color: #66D9EF;">int</span>);
<span style="color: #66D9EF;">fp</span> <span style="color: #F92672;">fptr</span> = func;
</pre>
</div>

<ul class="org-ul">
<li>returning function pointer
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">int</span> (*<span style="color: #F92672; font-style: italic;">ff</span>(<span style="color: #66D9EF;">int</span>))(<span style="color: #66D9EF;">int</span>*, <span style="color: #66D9EF;">int</span>); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">ff is a function take an int and return a function pointer;</span>
<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">better choice</span>
<span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">int</span>(*<span style="color: #66D9EF;">FP</span>)(<span style="color: #66D9EF;">int</span>*, <span style="color: #66D9EF;">int</span>);
<span style="color: #66D9EF;">FP</span> <span style="color: #F92672; font-style: italic;">ff</span>(<span style="color: #66D9EF;">int</span>);
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-unnumbered-15" class="outline-2">
<h2 id="unnumbered-15">Class</h2>
<div class="outline-text-2" id="text-unnumbered-15">
</div><div id="outline-container-unnumbered-16" class="outline-3">
<h3 id="unnumbered-16">access permission</h3>
<div class="outline-text-3" id="text-unnumbered-16">
<p>
the default access permission of struct is public, and class is private
</p>
</div>
</div>
<div id="outline-container-unnumbered-17" class="outline-3">
<h3 id="unnumbered-17">typedef in a class</h3>
<div class="outline-text-3" id="text-unnumbered-17">
<p>
typedef in a class obey the standard access control of any other member.
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
<span style="color: #66D9EF;">public</span>:
    <span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">int</span> <span style="color: #66D9EF;">aInt</span>;
<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">char</span> <span style="color: #66D9EF;">aChar</span>;
};
<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">we can use the new type name with A::aINt , but we can access the private type name A::achar</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-18" class="outline-3">
<h3 id="unnumbered-18">class declaration, definition, implementation</h3>
<div class="outline-text-3" id="text-unnumbered-18">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>; <span style="color: #465457; font-style: italic;">//  </span><span style="color: #465457; font-style: italic;">declaration</span>
<span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>{}; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">definition</span>
<span style="color: #AE81FF;">A</span>::<span style="color: #F92672; font-style: italic;">A</span>(){} <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">each class member function implemetation</span>
</pre>
</div>
<p>
After the declaration and before a definition is seen, the new type is a incomplete type. 
</p>

<p>
the incomplete type can be used only in a limited ways: define a pointer or reference ,  declare a function that use the type as parameters or return type.
</p>
</div>
</div>
<div id="outline-container-unnumbered-19" class="outline-3">
<h3 id="unnumbered-19">this pointer</h3>
<div class="outline-text-3" id="text-unnumbered-19">
<p>
In an ordinary member function , this is a const pointer : Object *const this;
</p>

<p>
In a const member function , this ia a const pointer to a const objcet : const Objcet *const this;
</p>
</div>
</div>
<div id="outline-container-unnumbered-20" class="outline-3">
<h3 id="unnumbered-20">overload member function base on const</h3>
<div class="outline-text-3" id="text-unnumbered-20">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>{
<span style="color: #66D9EF;">public</span>:
    <span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>();
    <span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>() <span style="color: #66D9EF;">const</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">const object can only use the const version;</span>
};
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-21" class="outline-3">
<h3 id="unnumbered-21">class Scope</h3>
<div class="outline-text-3" id="text-unnumbered-21">
<p>
Parameter lists and member function body are in class Scope
</p>

<p>
member function return type are&#8217;n always in class scope, if the member function is defined outside the class body , the return type is outside the class scope
</p>
</div>
</div>
<div id="outline-container-unnumbered-22" class="outline-3">
<h3 id="unnumbered-22">name lookup in class scope</h3>
<div class="outline-text-3" id="text-unnumbered-22">
</div><div id="outline-container-unnumbered-23" class="outline-4">
<h4 id="unnumbered-23">name lookup for class member declarations</h4>
<div class="outline-text-4" id="text-unnumbered-23">
<p>
Names of types defined in a class must be seen before they are used as the type of a data member or as the return type or parameter types of a member function.
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">double</span> <span style="color: #66D9EF;">Money</span>;
<span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">Account</span>{
<span style="color: #66D9EF;">public</span>:
    <span style="color: #66D9EF;">Money</span> <span style="color: #F92672; font-style: italic;">balance</span>(){} <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">use the global Money</span>

<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">typedef</span> <span style="color: #66D9EF;">long</span> <span style="color: #66D9EF;">long</span> <span style="color: #66D9EF;">Money</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">error : can not change meaning of Money</span>
    <span style="color: #66D9EF;">Money</span> <span style="color: #F92672;">bal</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-24" class="outline-4">
<h4 id="unnumbered-24">name lookup in class member definitions</h4>
<div class="outline-text-4" id="text-unnumbered-24">
<ol class="org-ol">
<li>local scope
</li>
<li>class scope
</li>
<li>scope before the member function definition
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-unnumbered-25" class="outline-3">
<h3 id="unnumbered-25">constructor</h3>
<div class="outline-text-3" id="text-unnumbered-25">
</div><div id="outline-container-unnumbered-26" class="outline-4">
<h4 id="unnumbered-26">constructor initializer</h4>
<div class="outline-text-4" id="text-unnumbered-26">
<p>
members that are const or reference types must be initialized in the constructor initializer
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
<span style="color: #66D9EF;">public</span>:
    <span style="color: #F92672; font-style: italic;">A</span>(<span style="color: #66D9EF;">int</span> <span style="color: #F92672;">ref</span>, <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">ci</span>) : m_ri(ref), m_ci(ci) {} <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">m_ri, and m_ci must be initilized in constuctor initializer</span>

<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">int</span>&amp; <span style="color: #F92672;">m_ri</span>;
    <span style="color: #66D9EF;">const</span> <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">m_ci</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-27" class="outline-4">
<h4 id="unnumbered-27">order of member initialization</h4>
<div class="outline-text-4" id="text-unnumbered-27">
<p>
the order in which members are initialized is the order in which the members are defined, regardless the order in initializer list.
</p>
</div>
</div>
<div id="outline-container-unnumbered-28" class="outline-4">
<h4 id="unnumbered-28">default constructor</h4>
<div class="outline-text-4" id="text-unnumbered-28">
<p>
common mistake in using  default constructor
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">A</span> <span style="color: #F92672; font-style: italic;">obj</span>(); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">! declares a function !!!</span>
<span style="color: #66D9EF;">A</span> <span style="color: #F92672;">obj</span> = A(); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">this is ok to define a object</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-29" class="outline-4">
<h4 id="unnumbered-29">implicit class-type conversions</h4>
<div class="outline-text-4" id="text-unnumbered-29">
<p>
constructors with single argument defines an implicit conversions from the parameter type to the class type
</p>

<p>
use explicit keyword to avoid implicit conversions
</p>
</div>
</div>
</div>
<div id="outline-container-unnumbered-30" class="outline-3">
<h3 id="unnumbered-30">friends</h3>
<div class="outline-text-3" id="text-unnumbered-30">
</div><div id="outline-container-unnumbered-31" class="outline-4">
<h4 id="unnumbered-31">friend function</h4>
<div class="outline-text-4" id="text-unnumbered-31">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
    <span style="color: #66D9EF;">friend</span> <span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">A</span>&amp;);
    <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">friend function may be defiend inside the class.the friend function name is exported to the scope enclosing the class definition.</span>
    <span style="color: #66D9EF;">friend</span> <span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">friendFunc</span>(<span style="color: #66D9EF;">A</span>&amp;){
    <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">do sth</span>
    }
};

<span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">B</span>
{
    <span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">doSth</span>(){
        <span style="color: #66D9EF;">A</span> <span style="color: #F92672;">a</span>;
        friendFunc(a); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">calling the global funcion.</span>
    }
};
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-32" class="outline-4">
<h4 id="unnumbered-32">friend class</h4>
<div class="outline-text-4" id="text-unnumbered-32">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
    <span style="color: #66D9EF;">friend</span> <span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">B</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-33" class="outline-4">
<h4 id="unnumbered-33">friend class member function</h4>
<div class="outline-text-4" id="text-unnumbered-33">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
    <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">class B must be defined before class A, otherwise class A could not a B member function as friend;</span>
    <span style="color: #66D9EF;">friend</span> <span style="color: #66D9EF;">B</span>&amp; <span style="color: #AE81FF;">B</span>::<span style="color: #F92672; font-style: italic;">func</span>(<span style="color: #66D9EF;">A</span>&amp; <span style="color: #F92672;">a</span>);
    <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">However, the B::func() itself can't be defined until class A has been defined. or else the B::func() can't access the members of clas A</span>
};
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-unnumbered-34" class="outline-3">
<h3 id="unnumbered-34">static class members</h3>
<div class="outline-text-3" id="text-unnumbered-34">
<p>
static data members must be defined outside the class definition
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">int</span> <span style="color: #F92672; font-style: italic;">initMember</span>() { <span style="color: #66D9EF;">return</span> 1;}
    <span style="color: #66D9EF;">static</span> <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">sm_i</span>;
};
<span style="color: #AE81FF;">A</span>::sm_i = initMember(); <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">the definition of static class member is in the class scope, we can call the static member function directly without qualification</span>
</pre>
</div>
</div>

<div id="outline-container-unnumbered-35" class="outline-4">
<h4 id="unnumbered-35">const static data member</h4>
<div class="outline-text-4" id="text-unnumbered-35">
<p>
const static data member can be initialize either within the class body or not
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">static</span> <span style="color: #66D9EF;">const</span> <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">i</span> = 10;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-36" class="outline-4">
<h4 id="unnumbered-36">static member are not part of objects</h4>
<div class="outline-text-4" id="text-unnumbered-36">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">class</span> <span style="color: #66D9EF;">A</span>
{
<span style="color: #66D9EF;">private</span>:
    <span style="color: #66D9EF;">static</span> <span style="color: #66D9EF;">A</span> <span style="color: #F92672;">sm_a</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">ok</span>
    <span style="color: #66D9EF;">A</span>* <span style="color: #F92672;">m_pa</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">ok, class name has been seen </span>
    <span style="color: #66D9EF;">A</span> <span style="color: #F92672;">m_a</span>; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">error, A is imcomplete type</span>
};
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-unnumbered-37" class="outline-3">
<h3 id="unnumbered-37">overall</h3>
<div class="outline-text-3" id="text-unnumbered-37">
<p>
think about th scope, when using a name. think about type complement when define an object;
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-38" class="outline-2">
<h2 id="unnumbered-38">Operator Overload</h2>
</div>
<div id="outline-container-unnumbered-39" class="outline-2">
<h2 id="unnumbered-39">Copy Control</h2>
</div>
<div id="outline-container-unnumbered-40" class="outline-2">
<h2 id="unnumbered-40">OOP</h2>
<div class="outline-text-2" id="text-unnumbered-40">
</div><div id="outline-container-unnumbered-41" class="outline-3">
<h3 id="unnumbered-41">Encapsulation</h3>
</div>

<div id="outline-container-unnumbered-42" class="outline-3">
<h3 id="unnumbered-42">Inheritance</h3>
</div>

<div id="outline-container-unnumbered-43" class="outline-3">
<h3 id="unnumbered-43">Polymorphism</h3>
</div>
</div>

<div id="outline-container-unnumbered-44" class="outline-2">
<h2 id="unnumbered-44">Compilaton</h2>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithm]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/21/sorting-algorithm/"/>
    <updated>2014-10-21T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/21/sorting-algorithm</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Sorting Algorithm</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">Insertion Sort</h2>
<div class="outline-text-2" id="text-unnumbered-2">
</div><div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3">Implementation</h3>
<div class="outline-text-3" id="text-unnumbered-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">insertionSort</span>(<span style="color: #66D9EF;">int</span>* <span style="color: #F92672;">ary</span>, <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">len</span>)
{
    <span style="color: #66D9EF;">if</span> (len &lt; 2)
        <span style="color: #66D9EF;">return</span>;

    <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">i</span> = 1; i &lt; len; ++i) <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">travel the unsorted list</span>
    {
        <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">j</span> = i;
        <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">tmp</span> = ary[j];<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">auxilary space, store the value to be inserted to the sorted array </span>
        <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">the best case only compare with the right most element of the sorted array</span>
        <span style="color: #66D9EF;">while</span> (j &gt; 0 &amp;&amp; ary[j - 1] &gt; tmp) <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">worse case comparisons, 1 + 2 + 3 + ... + len - 1 = len*(len-1) / 2 = O(n^2)</span>
        {
            <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">find the suitable place to insert</span>
            ary[j] = ary[j - 1]; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">also worse case swaps : O(n^2)</span>
            --j;
        }
        ary[j] = tmp; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">insert the value to selected index;</span>
    }

}
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4">Performance</h3>
<div class="outline-text-3" id="text-unnumbered-4">
<p>
stable
</p>

<p>
worse : O(n^2) comparisons, swaps
</p>

<p>
best  : O(n) comparisons, O(1)swaps
</p>

<p>
space complexity : O(n) total, O(1) auxilary
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-2">
<h2 id="unnumbered-5">Selection Sort</h2>
<div class="outline-text-2" id="text-unnumbered-5">
</div><div id="outline-container-unnumbered-6" class="outline-3">
<h3 id="unnumbered-6">Implementation</h3>
<div class="outline-text-3" id="text-unnumbered-6">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">selectionSort</span>(<span style="color: #66D9EF;">int</span>* <span style="color: #F92672;">ary</span>, <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">len</span>)
{
    <span style="color: #66D9EF;">if</span> (len &lt; 2)
        <span style="color: #66D9EF;">return</span>;

    <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">i</span> = 0; i &lt; len - 1; ++i)
    {
        <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">minIndex</span> = i; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">auxiliary space, recored the minimum index</span>
        <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">j</span> = i+1; j &lt; len; ++j)  <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">travel the rest unsorted list every time. find the minimum value index</span>
        {
            <span style="color: #66D9EF;">if</span> (ary[minIndex] &gt; ary[j]) <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">worse case comparisons : (n-1) + (n-2) + ... + 1 = n(n-1) / 2 = O(n^2)</span>
            {
                minIndex = j;
            }
        }

        <span style="color: #66D9EF;">if</span> (minIndex != i) <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">worse case swaps : n</span>
        {
            <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">tmp</span> = ary[minIndex];
            ary[minIndex] = ary[i];
            ary[i] = tmp;
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Performance</h3>
<div class="outline-text-3" id="text-unnumbered-7">
<p>
stable
</p>

<p>
worse : O(n^2) comparisons, O(n) swaps
</p>

<p>
best : O(n^2) comparisons, 0 swaps
</p>

<p>
space complexity : O(n) total, O(1) auxiliary
</p>

<p>
used when the swap operation take place much expensive than the compare operation.
</p>
</div>
</div>
</div>
<div id="outline-container-unnumbered-8" class="outline-2">
<h2 id="unnumbered-8">Quick Sort</h2>
<div class="outline-text-2" id="text-unnumbered-8">
<p>
Quick Sort is a Divide And Conquer algorithm
</p>
</div>
<div id="outline-container-unnumbered-9" class="outline-3">
<h3 id="unnumbered-9">Implementation</h3>
<div class="outline-text-3" id="text-unnumbered-9">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">quickSort</span>(<span style="color: #66D9EF;">int</span>* <span style="color: #F92672;">ary</span>, <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">len</span>)
{
    <span style="color: #66D9EF;">if</span> (len &lt; 2)
    {
        <span style="color: #66D9EF;">return</span>;
    }
    <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">pivot</span> = ary[0]; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">select a pivot</span>
    <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">minIndex</span> = 0; <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">initialize the minIndex to be the pivot index</span>
    <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">maxIndex</span> = len -1;
    <span style="color: #66D9EF;">while</span> (maxIndex &gt; minIndex)
    {
        <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">reverse searching the value less than pivot, and copy the value to the minIndex which initialize to be the pivot index</span>
        <span style="color: #66D9EF;">for</span> (; maxIndex &gt; minIndex; --maxIndex)
        {
            <span style="color: #66D9EF;">if</span> (ary[maxIndex] &lt; pivot)
            {
                ary[minIndex++] = ary[maxIndex];
                <span style="color: #66D9EF;">break</span>;
            }
        }

        <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">searching the value greater than pivot, and copy to maxIndex</span>
        <span style="color: #66D9EF;">for</span> (; minIndex &lt; maxIndex; ++minIndex)
        {
            <span style="color: #66D9EF;">if</span> (ary[minIndex] &gt; pivot)
            {
                ary[maxIndex--] = ary[minIndex];
                <span style="color: #66D9EF;">break</span>;
            }
        }
    }
    ary[minIndex] = pivot;
    quickSort(ary, minIndex);
    quickSort(ary + minIndex + 1, len - minIndex - 1);
}
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-10" class="outline-3">
<h3 id="unnumbered-10">Performance</h3>
<div class="outline-text-3" id="text-unnumbered-10">
<p>
unstable
</p>

<p>
worse : O(n^2)
</p>

<p>
Best : O(n log n)
</p>

<p>
space complexity : O(n) total, O(log n) auxiliary
</p>
</div>
</div>
</div>
<div id="outline-container-unnumbered-11" class="outline-2">
<h2 id="unnumbered-11">Bubble Sort</h2>
<div class="outline-text-2" id="text-unnumbered-11">
</div><div id="outline-container-unnumbered-12" class="outline-3">
<h3 id="unnumbered-12">Implementation</h3>
<div class="outline-text-3" id="text-unnumbered-12">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">bubbleSort</span>(<span style="color: #66D9EF;">int</span>* <span style="color: #F92672;">ary</span>, <span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">len</span>)
{
    <span style="color: #66D9EF;">bool</span> <span style="color: #F92672;">isSwap</span> = <span style="color: #AE81FF;">true</span>;
    <span style="color: #66D9EF;">while</span> (isSwap)
    {
        isSwap = <span style="color: #AE81FF;">false</span>;
        <span style="color: #66D9EF;">for</span> (<span style="color: #66D9EF;">size_t</span> <span style="color: #F92672;">i</span> = 0; i &lt; len - 1; ++i) <span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">every traversal find the biggest number from the rest unsorted list to the last unsorted index;</span>
        {
            <span style="color: #66D9EF;">if</span> (ary[i] &gt; ary[i+1])
            {
                <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">tmp</span> = ary[i];
                ary[i] = ary[i+1];
                ary[i+1] = tmp;
                isSwap = <span style="color: #AE81FF;">true</span>;
            }
        }
    }
}
</pre>
</div>
</div>
</div>
<div id="outline-container-unnumbered-13" class="outline-3">
<h3 id="unnumbered-13">Performance</h3>
<div class="outline-text-3" id="text-unnumbered-13">
<p>
stable
</p>

<p>
Worse : O(n^2)
</p>

<p>
Best : O(n)
</p>

<p>
space complexity : O(n) total, O(1) auxiliary
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-14" class="outline-2">
<h2 id="unnumbered-14">Shell Sort</h2>
<div class="outline-text-2" id="text-unnumbered-14">
</div><div id="outline-container-unnumbered-15" class="outline-3">
<h3 id="unnumbered-15">Implementation</h3>
</div>

<div id="outline-container-unnumbered-16" class="outline-3">
<h3 id="unnumbered-16">Performance</h3>
<div class="outline-text-3" id="text-unnumbered-16">
<p>
Worse : O(n^2)
</p>

<p>
Best : O(n log n)
</p>

<p>
space complexity : O(n) total, O(1) auxiliary
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Structure]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/20/data-structure/"/>
    <updated>2014-10-20T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/20/data-structure</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Data structure</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-unnumbered-2" class="outline-2">
<h2 id="unnumbered-2">List</h2>
<div class="outline-text-2" id="text-unnumbered-2">
</div><div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3">Operations</h3>
<div class="outline-text-3" id="text-unnumbered-3">
<p>
Implementation of a list data structure may proide some of the following operation :
</p>
<ul class="org-ul">
<li>a constructor for create an empty list
</li>
<li>an operation for testing whether or not a list is empty
</li>
<li>an operation for appending an entity to a list
</li>
<li>an operation for determinning the first component of a list(&#8220;head&#8221;)
</li>
<li>an operation for referring to the list consisting of all the components of a list except for its first (&#8220;tail&#8221;)
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">list for int</span>
<span style="color: #66D9EF;">struct</span> <span style="color: #66D9EF;">Node</span>
{
    <span style="color: #66D9EF;">int</span> <span style="color: #F92672;">m_data</span>;
    <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">m_next</span>;
};

<span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">.h</span>
TODO
</pre>
</div>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #465457; font-style: italic;">// </span><span style="color: #465457; font-style: italic;">.cpp</span>
TODO
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4">List Alogorithm</h3>
<div class="outline-text-3" id="text-unnumbered-4">
</div><div id="outline-container-unnumbered-5" class="outline-4">
<h4 id="unnumbered-5">reverse a list</h4>
<div class="outline-text-4" id="text-unnumbered-5">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">Node</span>* <span style="color: #F92672; font-style: italic;">reverse</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">pre</span>, <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">next</span>)
{
    <span style="color: #66D9EF;">if</span> (pre == 0 || next == 0)
    {
        <span style="color: #66D9EF;">return</span> pre;
    }

    <span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">newhead</span> = reverse(next, next-&gt;m_next);
    next-&gt;m_next = pre;
    pre-&gt;m_next = 0;
    <span style="color: #66D9EF;">return</span> newhead;
}
</pre>
</div>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Tree Traversal]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/20/binary-tree-traversal/"/>
    <updated>2014-10-20T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/20/binary-tree-traversal</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">Binary Tree Traversal</h2>
<div class="outline-text-2" id="text-unnumbered-1">
</div><div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2"><a href="#unnumbered-5">Pre-order traversal</a></h3>
</div>

<div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3"><a href="#unnumbered-6">In-order traversal</a></h3>
</div>

<div id="outline-container-unnumbered-4" class="outline-3">
<h3 id="unnumbered-4"><a href="#unnumbered-7">Post-order traversal</a></h3>
<div class="outline-text-3" id="text-unnumbered-4">
<p>
<!-- more -->
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-2">
<h2 id="unnumbered-5">Pre-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-5">
<p>
root-&gt;left-&gt;right
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">preorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    visit(root);
    preorder(root-&gt;left);
    preorder(root-&gt;right);
}
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-6" class="outline-2">
<h2 id="unnumbered-6">In-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-6">
<p>
left-&gt;root-&gt;right;
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">inorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    inorder(root-&gt;left);
    visit(root);
    inorder(root-&gt;right);
}
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-2">
<h2 id="unnumbered-7">Post-order traversal</h2>
<div class="outline-text-2" id="text-unnumbered-7">
<p>
right-&gt;left-&gt;root
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #66D9EF;">void</span> <span style="color: #F92672; font-style: italic;">postorder</span>(<span style="color: #66D9EF;">Node</span>* <span style="color: #F92672;">root</span>)
{
    <span style="color: #66D9EF;">if</span> (<span style="font-weight: bold;">!</span>root)
    {
        <span style="color: #66D9EF;">return</span>;
    }

    postorder(root-&gt;right);
    postorder(root-&gt;left);
    visit(root);
}
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Make]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/19/learning-make/"/>
    <updated>2014-10-19T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/19/learning-make</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">OverView</h2>
<div class="outline-text-2" id="text-unnumbered-1">
</div><div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2"><a href="#unnumbered-4">A simple makefile</a></h3>
</div>

<div id="outline-container-unnumbered-3" class="outline-3">
<h3 id="unnumbered-3"><a href="#unnumbered-5">What makefiles contain</a></h3>
<div class="outline-text-3" id="text-unnumbered-3">
<p>
<!-- more -->
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-4" class="outline-2">
<h2 id="unnumbered-4">A simple makefile</h2>
<div class="outline-text-2" id="text-unnumbered-4">
<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #F92672; font-style: italic;">target ...</span> : prerequisites
    recipe
    ...
</pre>
</div>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-2">
<h2 id="unnumbered-5">What makefiles contain</h2>
<div class="outline-text-2" id="text-unnumbered-5">
</div><div id="outline-container-unnumbered-6" class="outline-3">
<h3 id="unnumbered-6">Explicit rules</h3>
</div>

<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Implicit rules</h3>
</div>

<div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Variable definition</h3>
</div>

<div id="outline-container-unnumbered-9" class="outline-3">
<h3 id="unnumbered-9">Directive</h3>
<div class="outline-text-3" id="text-unnumbered-9">
<p>
include filenames .. : Including another makefile, the first character of the line must not be a tab
</p>

<p>
Deciding whether to use or ignore a part of the makefile
</p>

<p>
Defining a variable from a verbatain string containing multiple lines
</p>
</div>
</div>

<div id="outline-container-unnumbered-10" class="outline-3">
<h3 id="unnumbered-10">Comments</h3>
<div class="outline-text-3" id="text-unnumbered-10">
<p>
&#8217;#&#8217; in a makefile start a comment.
</p>
</div>
</div>

<div id="outline-container-unnumbered-11" class="outline-3">
<h3 id="unnumbered-11"><span class="todo TODO">TODO</span> this receipt didn&#8217;t finished yet</h3>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning GCC Compilation]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/19/Learning-GCC-Compilation/"/>
    <updated>2014-10-19T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/19/Learning-GCC-Compilation</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">General Use Of GCC</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
<div id="outline-container-unnumbered-2" class="outline-3">
<h3 id="unnumbered-2">Compilation States</h3>
<div class="outline-text-3" id="text-unnumbered-2">
</div><div id="outline-container-unnumbered-3" class="outline-4">
<h4 id="unnumbered-3">Preprocessing</h4>
<div class="outline-text-4" id="text-unnumbered-3">
<p>
-E : stop after preprocessing 
</p>

<p>
-D name : define a marco 
</p>

<p>
-D name=definition : define a marco with the definition 
</p>

<p>
-I dir : Add additional directory to the list of directories to be searched for the header fiels, the add -I option directories are search before the standard system include directory.
</p>

<p>
-w : supress all warnning 
</p>

<p>
-Wall : turn on all warnning
</p>

<p>
-std=standard : specify the standard 
</p>

<p>
-pedantic : Issue all the mandatory diagnostics listed in the C standard
</p>
</div>
</div>

<div id="outline-container-unnumbered-4" class="outline-4">
<h4 id="unnumbered-4">Compilation</h4>
<div class="outline-text-4" id="text-unnumbered-4">
<p>
-S : stop after compilation, not assemble
</p>
</div>
</div>

<div id="outline-container-unnumbered-5" class="outline-4">
<h4 id="unnumbered-5">Assemble</h4>
<div class="outline-text-4" id="text-unnumbered-5">
<p>
-c : stop after compilation and assemble, not link
</p>
</div>
</div>

<div id="outline-container-unnumbered-6" class="outline-4">
<h4 id="unnumbered-6">Linking</h4>
<div class="outline-text-4" id="text-unnumbered-6">
<p>
-l library : search the library when linking
</p>

<p>
-shared : produce a shared object 
</p>

<p>
-static : to prevent link with the shared libraries 
</p>
</div>
</div>
</div>

<div id="outline-container-unnumbered-7" class="outline-3">
<h3 id="unnumbered-7">Options Controlling the kind of Output</h3>
<div class="outline-text-3" id="text-unnumbered-7">
<p>
-E : Stop after Preprocessing
</p>

<p>
-S : Stop after compilation, not assemble
</p>

<p>
-c : Stop after compilation and assemble , not link
</p>

<p>
-o : Specify the output file name
</p>

<p>
-g : Producce debugging infomation in the operation native format
</p>
</div>
</div>

<div id="outline-container-unnumbered-8" class="outline-3">
<h3 id="unnumbered-8">Options for directory search</h3>
<div class="outline-text-3" id="text-unnumbered-8">
<p>
-I : add directory to be searched for header files
</p>

<p>
-L : add directory to be searched for &#8216;-l&#8217; linking library
</p>
</div>
</div>

<div id="outline-container-unnumbered-9" class="outline-3">
<h3 id="unnumbered-9">Hardware Models and Configurations</h3>
<div class="outline-text-3" id="text-unnumbered-9">
<p>
-fPIC ： emit Position Independent Code, suitable for dynamic link, used when create a shared library with -shared option
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The First Post]]></title>
    <link href="http://chaye146.github.io//github/blog/2014/10/18/the-first-post/"/>
    <updated>2014-10-18T00:00:00+08:00</updated>
    <id>http://chaye146.github.io//github/blog/2014/10/18/the-first-post</id>
    <content type="html"><![CDATA[<div id="outline-container-unnumbered-1" class="outline-2">
<h2 id="unnumbered-1">To Memorize the birth of my blog</h2>
<div class="outline-text-2" id="text-unnumbered-1">
<p>
<!-- more -->
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
